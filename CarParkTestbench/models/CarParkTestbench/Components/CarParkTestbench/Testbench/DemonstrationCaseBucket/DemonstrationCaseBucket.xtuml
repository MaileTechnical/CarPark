-- BP 7.1.6 content: ModelClass syschar: 3 persistence-version: 7.1.6

INSERT INTO O_OBJ
	VALUES ("51d1e804-b212-47e0-a6c7-6e8e9d8940c8",
	'DemonstrationCaseBucket',
	32,
	'DemonstrationCaseBucket',
	'A test bucket which demonstrates some capbilities of the Test Framework.

These feature demmonstrations must be built around the available application - car park control.
However, these demonstration cases do not form any part of normal testing.
Some tests are useful in verifying behavior of the Test Framework itself - e.g. error handling.
Not all tests are expected to pass - indeed, some are designed to exhibit failure.',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("7b34384a-973f-48a7-8678-1f8b01c42506",
	"51d1e804-b212-47e0-a6c7-6e8e9d8940c8",
	'CreateBucketTests',
	'Script the seqLabels of stimuli and observations for each test case in this bucket.',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// the following tests are based on use cases but cases UC1 and UC11 have deliberate failures.

select one bucket related by self->TestBucket[R7];
send TESTSEQ::NameTestBucket( bucketId:bucket.bucketId, bucketLabel:"CarPark_Bucket_2" );
send TESTSEQ::SetTestBucketTimeResolutions( bucketId:bucket.bucketId, timeResolution:timeResolution::second, pollResolution:timeResolution::second );

send TESTSEQ::CreateTestCase( bucketId:bucket.bucketId, caseLabel:"UC1_failure" ); 
send TESTSEQ::AddStimulusSequence( seqLabel:"seq01" );
VehicleArrived::Create( seqLabel:"seq01", location:"North", stand:"Entry" );
QueryTicketRequest::Create( seqLabel:"seq01", location:"North", enabled:True );
TicketRequested::Create( seqLabel:"seq01", location:"North" );
TicketIssued::Create( seqLabel:"seq01", location:"North" );
TicketTaken::Create( seqLabel:"seq01", location:"North", stand:"Entry" );
BarrierCheck::Create( seqLabel:"seq01", location:"North", stand:"Entry", state:BarrierState::Open );
VehicleDeparture::Create( seqLabel:"seq01", location:"North", stand:"Entry" );
// Now, incorrectly attempt to check that the barrier is open; in fact, it should be closed.
BarrierCheck::Create( seqLabel:"seq01", location:"North", stand:"Entry", state:BarrierState::Open );
FastForward::Create( seqLabel:"seq01", hours:1, minutes:0, seconds:0 );

send TESTSEQ::CreateTestCase( bucketId:bucket.bucketId, caseLabel:"UC5_pay" ); 
send TESTSEQ::AddStimulusSequence( seqLabel:"seq05" );
TicketInserted::Create( seqLabel:"seq05", location:"1st Floor", stand:"Pay" );
BalanceValue::Create( seqLabel:"seq05", location:"1st Floor", pay:True );
TicketReturned::Create( seqLabel:"seq05", location:"1st Floor" );
ChangeDispensed::Create( seqLabel:"seq05", location:"1st Floor" );
TicketTaken::Create( seqLabel:"seq05", location:"1st Floor", stand:"Pay" );

send TESTSEQ::CreateTestCase( bucketId:bucket.bucketId, caseLabel:"UC11_failure" ); 
send TESTSEQ::AddStimulusSequence( seqLabel:"seq11" );
VehicleArrived::Create( seqLabel:"seq11", location:"Lane 1", stand:"Exit" );
TicketInserted::Create( seqLabel:"seq11", location:"Lane 1", stand:"Exit" );
BarrierCheck::Create( seqLabel:"seq11", location:"North", stand:"Entry", state:BarrierState::Open );
VehicleDeparture::Create( seqLabel:"seq11", location:"Lane 1", stand:"Exit" );
// Now, incorrectly attempt to check that the barrier is open; in fact, it should be closed.
BarrierCheck::Create( seqLabel:"seq11", location:"North", stand:"Entry", state:BarrierState::Open );

bucket.Initialized();',
	1,
	'',
	"00000000-0000-0000-0000-000000000000",
	0);
INSERT INTO O_TFR
	VALUES ("aa04c61b-ee1f-48da-8998-5b3f965c3b06",
	"51d1e804-b212-47e0-a6c7-6e8e9d8940c8",
	'AddBucketToSuite',
	'Configure the Test Suite to include this bucket''s set of test cases when run.',
	"ba5eda7a-def5-0000-0000-000000000000",
	0,
	'create object instance failures of DemonstrationCaseBucket;
create object instance bucket of TestBucket;
relate failures to bucket across R7;
bucket.AddToSuite();',
	1,
	'',
	"7b34384a-973f-48a7-8678-1f8b01c42506",
	0);
INSERT INTO O_TFR
	VALUES ("7bf67c40-7508-4c4e-92bb-209c7df960da",
	"51d1e804-b212-47e0-a6c7-6e8e9d8940c8",
	'RunSolo',
	'Execute the set of tests in this bucket stand-alone.',
	"ba5eda7a-def5-0000-0000-000000000000",
	0,
	'create object instance operator of Operator;  // for status checks..
send TESTSEQ::RegisterTestSuite( suiteLabel:"CarPark Demonstration Test Suite", keepAllCases:False ); 
DemonstrationCaseBucket::AddBucketToSuite();
send Operator::OpenCarpark();',
	1,
	'',
	"aa04c61b-ee1f-48da-8998-5b3f965c3b06",
	0);
INSERT INTO O_ID
	VALUES (0,
	"51d1e804-b212-47e0-a6c7-6e8e9d8940c8");
INSERT INTO O_ID
	VALUES (1,
	"51d1e804-b212-47e0-a6c7-6e8e9d8940c8");
INSERT INTO O_ID
	VALUES (2,
	"51d1e804-b212-47e0-a6c7-6e8e9d8940c8");
INSERT INTO PE_PE
	VALUES ("51d1e804-b212-47e0-a6c7-6e8e9d8940c8",
	1,
	"3430745e-1746-4e96-ac58-2ee3ee684b20",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO EP_PKG_PROXY
	VALUES ("3430745e-1746-4e96-ac58-2ee3ee684b20",
	"00000000-0000-0000-0000-000000000000",
	"87ff681e-390e-45ca-9f9c-e0259790ea6c",
	'Testbench',
	'',
	0,
	'../Testbench.xtuml');
