-- BP 7.1.6 content: ModelClass syschar: 3 persistence-version: 7.1.6

INSERT INTO O_OBJ
	VALUES ("6e4007fa-f375-4c49-9cd6-be2522d4e869",
	'NonNominalCaseBucket',
	31,
	'NonNominalCaseBucket',
	'A test bucket which runs a number of non-nominal tests for the CarPark application.

Non-Nominal cases are intended to test behavior under abnormal conditions.
Such conditions might include time-outs, insufficient change, car park full, etc.
All tests are expected to pass.',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("75547086-6396-4515-a0b0-880e79ee6311",
	"6e4007fa-f375-4c49-9cd6-be2522d4e869",
	'CreateBucketTests',
	'Script the seqLabels of stimuli and observations for each test case in this bucket.',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'
select one bucket related by self->TestBucket[R700];
send TESTSEQ::SetTestBucketTimeResolutions( bucketId:bucket.bucketId, timeResolution:timeResolution::second, pollResolution:timeResolution::second );

// The following is a scenario where the entry stand waiting sensor is faulty; the operator issues a ticket.
send TESTSEQ::AddTestCase( caseLabel:"UC02" ); 
send TESTSEQ::LinkRequirement( reqPrefix:"CP", reqNumber:11, caseLabel:"UC02" );
send TESTSEQ::LinkRequirement( reqPrefix:"CP", reqNumber:61, caseLabel:"UC02" );
send TESTSEQ::AddStimulusSequence( seqLabel:"seq01" );
// Move to mid-morning for a linear rate with no minimum - see unsufficient change UC07 following.
FastForward::Create( seqLabel:"seq01", hours:3, minutes:0, seconds:2 );
OpAction::Create( seqLabel:"seq01", location:"North", stand:"Entry", action: OperatorAction::IssueTicket );
TicketTaken::Create( seqLabel:"seq01", location:"North", stand:"Entry" );
BarrierCheck::Create( seqLabel:"seq01", location:"North", stand:"Entry", state:BarrierState::Open );
VehicleMovement::Create( seqLabel:"seq01", location:"North", stand:"Entry", movement: Movement::Depart );
BarrierCheck::Create( seqLabel:"seq01", location:"North", stand:"Entry", state:BarrierState::Closed );

// The following is a scenario where the customer waits too long before making payment.
send TESTSEQ::AddTestCase( caseLabel:"UC08" ); 
send TESTSEQ::LinkRequirement( reqPrefix:"CP", reqNumber:33, caseLabel:"UC08" );
send TESTSEQ::AddStimulusSequence( seqLabel:"seq01" );
FastForward::Create( seqLabel:"seq01", hours:0, minutes:1, seconds:0 );
TicketInserted::Create( seqLabel:"seq01", location:"1st Floor", stand:"Pay", number:1 );
id = BalanceValue::Create( seqLabel:"seq01", location:"1st Floor", pay:False, wantChange:False );  // do not pay!
TicketReturned::Create( seqLabel:"seq01", location:"1st Floor" );
TicketTaken::Create( seqLabel:"seq01", location:"1st Floor", stand:"Pay" );
VisitCheck::Create( seqLabel:"seq01", ticket:1, payment:PayStatus::cancelled, change:ChangeStatus::ignore, deadlineStatus:DeadlineStatus::ignore ); 

// The following is a scenario where change is unavailable; the customer cancels.
send TESTSEQ::AddTestCase( caseLabel:"UC07" ); 
send TESTSEQ::LinkRequirement( reqPrefix:"CP", reqNumber:25, caseLabel:"UC07" );
send TESTSEQ::LinkRequirement( reqPrefix:"CP", reqNumber:27, caseLabel:"UC07" );
send TESTSEQ::LinkRequirement( reqPrefix:"CP", reqNumber:28, caseLabel:"UC07" );
send TESTSEQ::AddStimulusSequence( seqLabel:"seq01" );
TicketInserted::Create( seqLabel:"seq01", location:"Street", stand:"Pay", number:1 );
id = BalanceValue::Create( seqLabel:"seq01", location:"Street", pay:True, wantChange:True );
TicketReturned::Create( seqLabel:"seq01", location:"Street" );
ChangeDispensed::Create( seqLabel:"seq01", location:"Street", parent:id );
TicketTaken::Create( seqLabel:"seq01", location:"Street", stand:"Pay" );
VisitCheck::Create( seqLabel:"seq01", ticket:1, payment:PayStatus::cancelled, change:ChangeStatus::dispensed, deadlineStatus:DeadlineStatus::ignore ); 

// The following is a scenario where the customer has not paid; the fee is waived.
send TESTSEQ::AddTestCase( caseLabel:"UC14" ); 
send TESTSEQ::LinkRequirement( reqPrefix:"CP", reqNumber:43, caseLabel:"UC14" );
send TESTSEQ::LinkRequirement( reqPrefix:"CP", reqNumber:45, caseLabel:"UC14" );
send TESTSEQ::AddStimulusSequence( seqLabel:"seq01" );
VehicleMovement::Create( seqLabel:"seq01", location:"Lane 1", stand:"Exit", movement: Movement::Arrive );
TicketInserted::Create( seqLabel:"seq01", location:"Lane 1", stand:"Exit", number:1 );
OpAction::Create( seqLabel:"seq01", location:"Lane 1", stand:"Exit", action: OperatorAction::WaiveFee );
BarrierCheck::Create( seqLabel:"seq01", location:"Lane 1", stand:"Exit", state:BarrierState::Open );
VisitCheck::Create( seqLabel:"seq01", ticket:1, payment:PayStatus::waived, change: ChangeStatus::ignore, deadlineStatus:DeadlineStatus::valid ); 
VehicleMovement::Create( seqLabel:"seq01", location:"Lane 1", stand:"Exit", movement: Movement::Depart );
BarrierCheck::Create( seqLabel:"seq01", location:"Lane 1", stand:"Exit", state:BarrierState::Closed );
OccupancyCount::Create( seqLabel:"seq01", count:0 );

// The following emulates failure of the entry stand to issue a ticket (it is issued, but not taken; help required).
send TESTSEQ::AddTestCase( caseLabel:"UC03" ); 
send TESTSEQ::LinkRequirement( reqPrefix:"CP", reqNumber:12, caseLabel:"UC03" );
send TESTSEQ::AddStimulusSequence( seqLabel:"seq01" );
VehicleMovement::Create( seqLabel:"seq01", location:"North", stand:"Entry", movement: Movement::Arrive );
QueryTicketRequest::Create( seqLabel:"seq01", location:"North", enabled:True );
TicketRequested::Create( seqLabel:"seq01", location:"North" );
TicketIssued::Create( seqLabel:"seq01", location:"North" );
// Acting as if the entry stand fails to issue ticket, request operator assistance.
OpAction::Create( seqLabel:"seq01", location:"North", stand:"Entry", action: OperatorAction::OpenBarrier );
BarrierCheck::Create( seqLabel:"seq01", location:"North", stand:"Entry", state:BarrierState::Open );
VehicleMovement::Create( seqLabel:"seq01", location:"North", stand:"Entry", movement: Movement::Depart );
BarrierCheck::Create( seqLabel:"seq01", location:"North", stand:"Entry", state:BarrierState::Closed );

// The following is a scenario where change is unavailable; the customer forfeits the change.
send TESTSEQ::AddTestCase( caseLabel:"UC06" ); 
send TESTSEQ::LinkRequirement( reqPrefix:"CP", reqNumber:26, caseLabel:"UC06" );
send TESTSEQ::AddStimulusSequence( seqLabel:"seq01" );
FastForward::Create( seqLabel:"seq01", hours:0, minutes:1, seconds:0 );
TicketInserted::Create( seqLabel:"seq01", location:"Street", stand:"Pay", number:2 );
id = BalanceValue::Create( seqLabel:"seq01", location:"Street", pay:True, wantChange:False );
TicketReturned::Create( seqLabel:"seq01", location:"Street" );
TicketTaken::Create( seqLabel:"seq01", location:"Street", stand:"Pay" );
VisitCheck::Create( seqLabel:"seq01", ticket:2, payment:PayStatus::paid, change:ChangeStatus::forfeit, deadlineStatus:DeadlineStatus::ignore ); 

// The following is a scenario where the excess fee for a missed exit deadline is waived.
send TESTSEQ::AddTestCase( caseLabel:"UC12" ); 
send TESTSEQ::LinkRequirement( reqPrefix:"CP", reqNumber:29, caseLabel:"UC12" );
send TESTSEQ::LinkRequirement( reqPrefix:"CP", reqNumber:43, caseLabel:"UC12" );
send TESTSEQ::AddStimulusSequence( seqLabel:"seq01" );
// Overstay
FastForward::Create( seqLabel:"seq01", hours:0, minutes:16, seconds:0 );
VehicleMovement::Create( seqLabel:"seq01", location:"Lane 1", stand:"Exit", movement: Movement::Arrive );
TicketInserted::Create( seqLabel:"seq01", location:"Lane 1", stand:"Exit", number:2 );
VisitCheck::Create( seqLabel:"seq01", ticket:2, payment:PayStatus::paid, change:ChangeStatus::ignore, deadlineStatus:DeadlineStatus::expired );
FastForward::Create( seqLabel:"seq01", hours:0, minutes:0, seconds:1 ); // allow time for "Tardy Exit"
VisitCheck::Create( seqLabel:"seq01", ticket:2, payment:PayStatus::excess, change:ChangeStatus::ignore, deadlineStatus:DeadlineStatus::expired ); 
OpAction::Create( seqLabel:"seq01", location:"Lane 1", stand:"Exit", action: OperatorAction::WaiveFee );
VisitCheck::Create( seqLabel:"seq01", ticket:2, payment:PayStatus::waived, change:ChangeStatus::ignore, deadlineStatus:DeadlineStatus::expired ); 
VehicleMovement::Create( seqLabel:"seq01", location:"Lane 1", stand:"Exit", movement: Movement::Depart );


bucket.Initialized();',
	1,
	'',
	"00000000-0000-0000-0000-000000000000",
	0);
INSERT INTO O_TFR
	VALUES ("e52ffdae-5abf-468a-8d51-58e7136f8c5c",
	"6e4007fa-f375-4c49-9cd6-be2522d4e869",
	'AddBucketToSuite',
	'Configure the Test Suite to include this bucket''s set of test cases when run.',
	"ba5eda7a-def5-0000-0000-000000000000",
	0,
	'create object instance problem of NonNominalCaseBucket;
create object instance bucket of TestBucket;
bucket.name = "Non-nominal cases";
relate problem to bucket across R700;
bucket.AddToSuite();',
	1,
	'',
	"75547086-6396-4515-a0b0-880e79ee6311",
	0);
INSERT INTO O_TFR
	VALUES ("b995823e-33f0-44d2-85bc-13d529efc878",
	"6e4007fa-f375-4c49-9cd6-be2522d4e869",
	'RunSolo',
	'Execute the set of tests in this bucket stand-alone.',
	"ba5eda7a-def5-0000-0000-000000000000",
	0,
	'send TESTSEQ::RegisterTestSuite( suiteLabel:"CarPark NonNominal Test Suite", keepAllCases:False ); 
NonNominalCaseBucket::AddBucketToSuite();
send Operator::OpenCarpark();',
	1,
	'',
	"e52ffdae-5abf-468a-8d51-58e7136f8c5c",
	0);
INSERT INTO O_ID
	VALUES (0,
	"6e4007fa-f375-4c49-9cd6-be2522d4e869");
INSERT INTO O_ID
	VALUES (1,
	"6e4007fa-f375-4c49-9cd6-be2522d4e869");
INSERT INTO O_ID
	VALUES (2,
	"6e4007fa-f375-4c49-9cd6-be2522d4e869");
INSERT INTO PE_PE
	VALUES ("6e4007fa-f375-4c49-9cd6-be2522d4e869",
	1,
	"3430745e-1746-4e96-ac58-2ee3ee684b20",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO EP_PKG_PROXY
	VALUES ("3430745e-1746-4e96-ac58-2ee3ee684b20",
	"00000000-0000-0000-0000-000000000000",
	"87ff681e-390e-45ca-9f9c-e0259790ea6c",
	'Testbench',
	'',
	0,
	'../Testbench.xtuml');
