-- BP 7.1.6 content: ModelClass syschar: 3 persistence-version: 7.1.6

INSERT INTO O_OBJ
	VALUES ("0ce8e54d-149b-49cd-9f3e-e081c250192e",
	'DemonstrationCaseBucket',
	32,
	'DemonstrationCaseBucket',
	'A test bucket which demonstrates some capbilities of the Test Framework.

These feature demmonstrations must be built around the available application - car park control.
However, these demonstration cases do not form any part of normal testing.
Some tests are useful in verifying behavior of the Test Framework itself - e.g. error handling.
Not all tests are expected to pass - indeed, some are designed to exhibit failure.',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("9a71229c-81da-46c3-99b6-d515c6365bb0",
	"0ce8e54d-149b-49cd-9f3e-e081c250192e",
	'CreateBucketTests',
	'Script the seqLabels of stimuli and observations for each test case in this bucket.',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// Cases which demonstrate how failure is reported by a testbench using the test framework.
// Not wishing to introduce defects in the application, deliberate errors in observations are used.
// 
select one bucket related by self->TestBucket[R700];
send TESTSEQ::SetTestBucketTimeResolutions( bucketId:bucket.bucketId, timeResolution:timeResolution::second, pollResolution:timeResolution::second );

// The following tests are based on use cases but cases UC1 and UC11 have deliberate failures.

send TESTSEQ::AddTestCase( caseLabel:"UC1_failure" ); 
send TESTSEQ::AddStimulusSequence( seqLabel:"seq01" );
VehicleMovement::Create( seqLabel:"seq01", location:"North", stand:"Entry", movement: Movement::Arrive );
QueryTicketRequest::Create( seqLabel:"seq01", location:"North", enabled:True );
TicketRequested::Create( seqLabel:"seq01", location:"North" );
TicketIssued::Create( seqLabel:"seq01", location:"North" );
TicketTaken::Create( seqLabel:"seq01", location:"North", stand:"Entry" );
BarrierCheck::Create( seqLabel:"seq01", location:"North", stand:"Entry", state:BarrierState::Open );
VehicleMovement::Create( seqLabel:"seq01", location:"North", stand:"Entry", movement: Movement::Depart );
// Now, incorrectly attempt to check that the barrier is open; in fact, it should be closed.
BarrierCheck::Create( seqLabel:"seq01", location:"North", stand:"Entry", state:BarrierState::Open );
FastForward::Create( seqLabel:"seq01", hours:0, minutes:10, seconds:0 );

send TESTSEQ::AddTestCase( caseLabel:"UC5_pay" ); 
send TESTSEQ::AddStimulusSequence( seqLabel:"seq05" );
TicketInserted::Create( seqLabel:"seq05", location:"1st Floor", stand:"Pay", number:1 );
BalanceValue::Create( seqLabel:"seq05", location:"1st Floor", pay:True, wantChange:False );
TicketReturned::Create( seqLabel:"seq05", location:"1st Floor" );
TicketTaken::Create( seqLabel:"seq05", location:"1st Floor", stand:"Pay" );

send TESTSEQ::AddTestCase( caseLabel:"UC11_failure" ); 
send TESTSEQ::AddStimulusSequence( seqLabel:"seq11" );
VehicleMovement::Create( seqLabel:"seq11", location:"Lane 1", stand:"Exit", movement: Movement::Arrive );
TicketInserted::Create( seqLabel:"seq11", location:"Lane 1", stand:"Exit", number:1 );
BarrierCheck::Create( seqLabel:"seq11", location:"North", stand:"Exit", state:BarrierState::Open );
VehicleMovement::Create( seqLabel:"seq11", location:"Lane 1", stand:"Exit", movement: Movement::Depart );
// Now, incorrectly attempt to check that the barrier is open; in fact, it should be closed.
BarrierCheck::Create( seqLabel:"seq11", location:"North", stand:"Exit", state:BarrierState::Open );

bucket.Initialized();',
	1,
	'',
	"00000000-0000-0000-0000-000000000000",
	0);
INSERT INTO O_TFR
	VALUES ("59f1012a-aeb4-4281-8228-b1cb6e1f7b82",
	"0ce8e54d-149b-49cd-9f3e-e081c250192e",
	'AddBucketToSuite',
	'Configure the Test Suite to include this bucket''s set of test cases when run.',
	"ba5eda7a-def5-0000-0000-000000000000",
	0,
	'create object instance failures of DemonstrationCaseBucket;
create object instance bucket of TestBucket;
bucket.name = "Demonstration cases";
relate failures to bucket across R700;
bucket.AddToSuite();',
	1,
	'',
	"9a71229c-81da-46c3-99b6-d515c6365bb0",
	0);
INSERT INTO O_TFR
	VALUES ("0e4cff9d-b7e2-46eb-8dc5-14a4fbb59ed2",
	"0ce8e54d-149b-49cd-9f3e-e081c250192e",
	'RunSolo',
	'Execute the set of tests in this bucket stand-alone.',
	"ba5eda7a-def5-0000-0000-000000000000",
	0,
	'send TESTSEQ::RegisterTestSuite( suiteLabel:"CarPark Demonstration Test Suite", keepAllCases:False ); 
DemonstrationCaseBucket::AddBucketToSuite();
send Operator::OpenCarpark();',
	1,
	'',
	"59f1012a-aeb4-4281-8228-b1cb6e1f7b82",
	0);
INSERT INTO O_ID
	VALUES (0,
	"0ce8e54d-149b-49cd-9f3e-e081c250192e");
INSERT INTO O_ID
	VALUES (1,
	"0ce8e54d-149b-49cd-9f3e-e081c250192e");
INSERT INTO O_ID
	VALUES (2,
	"0ce8e54d-149b-49cd-9f3e-e081c250192e");
INSERT INTO PE_PE
	VALUES ("0ce8e54d-149b-49cd-9f3e-e081c250192e",
	1,
	"b5a0758b-c174-4581-a756-efc1476e998f",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO EP_PKG_PROXY
	VALUES ("b5a0758b-c174-4581-a756-efc1476e998f",
	"00000000-0000-0000-0000-000000000000",
	"87ff681e-390e-45ca-9f9c-e0259790ea6c",
	'TestSuite',
	'',
	0,
	'../TestSuite.xtuml');
