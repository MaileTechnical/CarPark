-- BP 7.1.6 content: ModelClass syschar: 3 persistence-version: 7.1.6

INSERT INTO O_OBJ
	VALUES ("c238eef4-8e34-489a-9d81-10ecb65b505e",
	'NonNominalCaseBucket',
	31,
	'NonNominalCaseBucket',
	'A test bucket which runs a number of non-nominal tests for the CarPark application.

Non-Nominal cases are intended to test behavior under abnormal conditions.
Such conditions might include time-outs, insufficient change, car park full, etc.
All tests are expected to pass.',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("95e6566d-a792-445f-8a83-13654a09c26a",
	"c238eef4-8e34-489a-9d81-10ecb65b505e",
	'CreateBucketTests',
	'Script the seqLabels of stimuli and observations for each test case in this bucket.',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'
select one bucket related by self->TestBucket[R700];
send TESTSEQ::SetTestBucketTimeResolutions( bucketId:bucket.bucketId, timeResolution:timeResolution::second, pollResolution:timeResolution::second );

// The entry stand waiting sensor is faulty; the operator issues a ticket.
send TESTSEQ::AddTestCase( caseLabel:"UC02" ); 
send TESTSEQ::LinkRequirement( reqPrefix:"CP", reqNumber:11, caseLabel:"UC02" );
send TESTSEQ::LinkRequirement( reqPrefix:"CP", reqNumber:61, caseLabel:"UC02" );
send TESTSEQ::AddStimulusSequence( seqLabel:"seq01" );
// Move to mid-morning for a linear rate with no minimum - see unsufficient change UC07 following.
FastForward::Create( seqLabel:"seq01", hours:3, minutes:0, seconds:2 );
OpAction::Create( seqLabel:"seq01", location:"North", stand:"Entry", action: OperatorAction::IssueTicket );
TicketTaken::Create( seqLabel:"seq01", location:"North", stand:"Entry" );
BarrierCheck::Create( seqLabel:"seq01", location:"North", stand:"Entry", state:BarrierState::Open );
VehicleMovement::Create( seqLabel:"seq01", location:"North", stand:"Entry", movement: Movement::Depart );
BarrierCheck::Create( seqLabel:"seq01", location:"North", stand:"Entry", state:BarrierState::Closed );


// The customer waits too long before making payment.
send TESTSEQ::AddTestCase( caseLabel:"UC08" ); 
send TESTSEQ::LinkRequirement( reqPrefix:"CP", reqNumber:33, caseLabel:"UC08" );
send TESTSEQ::AddStimulusSequence( seqLabel:"seq01" );
FastForward::Create( seqLabel:"seq01", hours:0, minutes:1, seconds:0 );
TicketInserted::Create( seqLabel:"seq01", location:"1st Floor", stand:"Pay", number:1 );
BalanceValue::Create( seqLabel:"seq01", location:"1st Floor", pay:False, wantChange:False );  // do not pay!
TicketReturned::Create( seqLabel:"seq01", location:"1st Floor" );
TicketTaken::Create( seqLabel:"seq01", location:"1st Floor", stand:"Pay" );
VisitCheck::CreatePay( seqLabel:"seq01", ticket:1, payment:PayStatus::cancelled, change:ChangeStatus::ignore ); 


// Change is unavailable; the customer cancels.
send TESTSEQ::AddTestCase( caseLabel:"UC07" ); 
send TESTSEQ::LinkRequirement( reqPrefix:"CP", reqNumber:25, caseLabel:"UC07" );
send TESTSEQ::LinkRequirement( reqPrefix:"CP", reqNumber:27, caseLabel:"UC07" );
send TESTSEQ::LinkRequirement( reqPrefix:"CP", reqNumber:28, caseLabel:"UC07" );
send TESTSEQ::AddStimulusSequence( seqLabel:"seq01" );
TicketInserted::Create( seqLabel:"seq01", location:"Street", stand:"Pay", number:1 );
BalanceValue::Create( seqLabel:"seq01", location:"Street", pay:True, wantChange:True );
TicketReturned::Create( seqLabel:"seq01", location:"Street" );
TicketTaken::Create( seqLabel:"seq01", location:"Street", stand:"Pay" );
VisitCheck::CreatePay( seqLabel:"seq01", ticket:1, payment:PayStatus::cancelled, change:ChangeStatus::dispensed ); 

// The customer has not paid; the fee is waived.
send TESTSEQ::AddTestCase( caseLabel:"UC14" ); 
send TESTSEQ::LinkRequirement( reqPrefix:"CP", reqNumber:43, caseLabel:"UC14" );
send TESTSEQ::LinkRequirement( reqPrefix:"CP", reqNumber:45, caseLabel:"UC14" );
send TESTSEQ::AddStimulusSequence( seqLabel:"seq01" );
VehicleMovement::Create( seqLabel:"seq01", location:"Lane 1", stand:"Exit", movement: Movement::Arrive );
TicketInserted::Create( seqLabel:"seq01", location:"Lane 1", stand:"Exit", number:1 );
OpAction::Create( seqLabel:"seq01", location:"Lane 1", stand:"Exit", action: OperatorAction::WaiveFee );
VisitCheck::CreateExit( seqLabel:"seq01", ticket:1, payment:PayStatus::waived, deadlineStatus:DeadlineStatus::ignore, unpaidStay:true ); 
BarrierCheck::Create( seqLabel:"seq01", location:"Lane 1", stand:"Exit", state:BarrierState::Open );
VehicleMovement::Create( seqLabel:"seq01", location:"Lane 1", stand:"Exit", movement: Movement::Depart );
BarrierCheck::Create( seqLabel:"seq01", location:"Lane 1", stand:"Exit", state:BarrierState::Closed );
OccupancyCount::Create( seqLabel:"seq01", count:0 );

// Emulate failure of the entry stand to issue a ticket (it is issued, but not taken; help required).
send TESTSEQ::AddTestCase( caseLabel:"UC03" ); 
send TESTSEQ::LinkRequirement( reqPrefix:"CP", reqNumber:12, caseLabel:"UC03" );
send TESTSEQ::AddStimulusSequence( seqLabel:"seq01" );
VehicleMovement::Create( seqLabel:"seq01", location:"North", stand:"Entry", movement: Movement::Arrive );
QueryTicketRequest::Create( seqLabel:"seq01", location:"North", enabled:True );
TicketRequested::Create( seqLabel:"seq01", location:"North" );
TicketIssued::Create( seqLabel:"seq01", location:"North" );
// Acting as if the entry stand fails to issue ticket, request operator assistance.
OpAction::Create( seqLabel:"seq01", location:"North", stand:"Entry", action: OperatorAction::OpenBarrier );
BarrierCheck::Create( seqLabel:"seq01", location:"North", stand:"Entry", state:BarrierState::Open );
VehicleMovement::Create( seqLabel:"seq01", location:"North", stand:"Entry", movement: Movement::Depart );
BarrierCheck::Create( seqLabel:"seq01", location:"North", stand:"Entry", state:BarrierState::Closed );

// Change is unavailable; the customer forfeits the change.
send TESTSEQ::AddTestCase( caseLabel:"UC06" ); 
send TESTSEQ::LinkRequirement( reqPrefix:"CP", reqNumber:26, caseLabel:"UC06" );
send TESTSEQ::AddStimulusSequence( seqLabel:"seq01" );
FastForward::Create( seqLabel:"seq01", hours:0, minutes:1, seconds:0 );
TicketInserted::Create( seqLabel:"seq01", location:"Street", stand:"Pay", number:2 );
BalanceValue::Create( seqLabel:"seq01", location:"Street", pay:True, wantChange:False );
TicketReturned::Create( seqLabel:"seq01", location:"Street" );
TicketTaken::Create( seqLabel:"seq01", location:"Street", stand:"Pay" );
VisitCheck::CreatePay( seqLabel:"seq01", ticket:2, payment:PayStatus::paid, change:ChangeStatus::forfeit ); 

// The excess fee for a missed exit deadline is waived.
send TESTSEQ::AddTestCase( caseLabel:"UC12" ); 
send TESTSEQ::LinkRequirement( reqPrefix:"CP", reqNumber:29, caseLabel:"UC12" );
send TESTSEQ::LinkRequirement( reqPrefix:"CP", reqNumber:42, caseLabel:"UC12" );
send TESTSEQ::LinkRequirement( reqPrefix:"CP", reqNumber:43, caseLabel:"UC12" );
send TESTSEQ::LinkRequirement( reqPrefix:"CP", reqNumber:45, caseLabel:"UC12" );
send TESTSEQ::AddStimulusSequence( seqLabel:"seq01" );
// Overstay
FastForward::Create( seqLabel:"seq01", hours:0, minutes:16, seconds:0 );
VehicleMovement::Create( seqLabel:"seq01", location:"Lane 1", stand:"Exit", movement: Movement::Arrive );
TicketInserted::Create( seqLabel:"seq01", location:"Lane 1", stand:"Exit", number:2 );
VisitCheck::CreateExit( seqLabel:"seq01", ticket:2, payment:PayStatus::paid, deadlineStatus:DeadlineStatus::expired, unpaidStay:false );
FastForward::Create( seqLabel:"seq01", hours:0, minutes:0, seconds:1 ); // allow time for "Tardy Exit"
VisitCheck::CreateExit( seqLabel:"seq01", ticket:2, payment:PayStatus::excess, deadlineStatus:DeadlineStatus::expired, unpaidStay:false ); 
OpAction::Create( seqLabel:"seq01", location:"Lane 1", stand:"Exit", action: OperatorAction::WaiveFee );
VisitCheck::CreateExit( seqLabel:"seq01", ticket:2, payment:PayStatus::waived, deadlineStatus:DeadlineStatus::expired, unpaidStay:false ); 
VehicleMovement::Create( seqLabel:"seq01", location:"Lane 1", stand:"Exit", movement: Movement::Depart );
ActivityCheck::CreateExit( seqLabel:"seq01", activate:False, location:"Lane 1", barrier: BarrierState::Closed, ticket:ExitTicketState::Inserted );

// The excess fee for a missed exit deadline is collected.
send TESTSEQ::AddTestCase( caseLabel:"UC13" ); 
send TESTSEQ::LinkRequirement( reqPrefix:"CP", reqNumber:29, caseLabel:"UC13" );
send TESTSEQ::LinkRequirement( reqPrefix:"CP", reqNumber:46, caseLabel:"UC13" );
send TESTSEQ::LinkRequirement( reqPrefix:"CP", reqNumber:48, caseLabel:"UC13" );
send TESTSEQ::AddStimulusSequence( seqLabel:"seq01" );
FastForward::Create( seqLabel:"seq01", hours:1, minutes:42, seconds:0 );
VehicleMovement::Create( seqLabel:"seq01", location:"North", stand:"Entry", movement: Movement::Arrive );
QueryTicketRequest::Create( seqLabel:"seq01", location:"North", enabled:True );
TicketRequested::Create( seqLabel:"seq01", location:"North" );
TicketIssued::Create( seqLabel:"seq01", location:"North" );
TicketTaken::Create( seqLabel:"seq01", location:"North", stand:"Entry" );
VehicleMovement::Create( seqLabel:"seq01", location:"North", stand:"Entry", movement: Movement::Depart );
FastForward::Create( seqLabel:"seq01", hours:5, minutes:0, seconds:0 );
TicketInserted::Create( seqLabel:"seq01", location:"1st Floor", stand:"Pay", number:3 );
BalanceValue::Create( seqLabel:"seq01", location:"1st Floor", pay:True, wantChange:False );
TicketReturned::Create( seqLabel:"seq01", location:"1st Floor" );
TicketTaken::Create( seqLabel:"seq01", location:"1st Floor", stand:"Pay" );
FastForward::Create( seqLabel:"seq01", hours:0, minutes:16, seconds:0 );
VehicleMovement::Create( seqLabel:"seq01", location:"Lane 1", stand:"Exit", movement: Movement::Arrive );
TicketInserted::Create( seqLabel:"seq01", location:"Lane 1", stand:"Exit", number:3 );
FastForward::Create( seqLabel:"seq01", hours:0, minutes:0, seconds:1 ); // allow time for "Tardy Exit"
VisitCheck::CreateExit( seqLabel:"seq01", ticket:3, payment:PayStatus::excess, deadlineStatus:DeadlineStatus::expired, unpaidStay:false ); 
OpAction::Create( seqLabel:"seq01", location:"Lane 1", stand:"Exit", action: OperatorAction::CollectFee );
VisitCheck::CreateExit( seqLabel:"seq01", ticket:3, payment:PayStatus::paid, deadlineStatus:DeadlineStatus::expired, unpaidStay:false ); 
VehicleMovement::Create( seqLabel:"seq01", location:"Lane 1", stand:"Exit", movement: Movement::Depart );
ActivityCheck::CreateExit( seqLabel:"seq01", activate:False, location:"Lane 1", barrier: BarrierState::Closed, ticket:ExitTicketState::Inserted );


// The customer has not paid; a fee is collected.
send TESTSEQ::AddTestCase( caseLabel:"UC15" ); 
send TESTSEQ::LinkRequirement( reqPrefix:"CP", reqNumber:42, caseLabel:"UC15" );
send TESTSEQ::LinkRequirement( reqPrefix:"CP", reqNumber:72, caseLabel:"UC15" );
send TESTSEQ::AddStimulusSequence( seqLabel:"seq01" );
VehicleMovement::Create( seqLabel:"seq01", location:"North", stand:"Entry", movement: Movement::Arrive );
QueryTicketRequest::Create( seqLabel:"seq01", location:"North", enabled:True );
TicketRequested::Create( seqLabel:"seq01", location:"North" );
TicketIssued::Create( seqLabel:"seq01", location:"North" );
TicketTaken::Create( seqLabel:"seq01", location:"North", stand:"Entry" );
FastForward::Create( seqLabel:"seq01", hours:0, minutes:0, seconds:31 );
VisitCheck::CreateEnter( seqLabel:"seq01", ticket:4, delayed:true );
VehicleMovement::Create( seqLabel:"seq01", location:"North", stand:"Entry", movement: Movement::Depart );
FastForward::Create( seqLabel:"seq01", hours:1, minutes:0, seconds:0 );
VehicleMovement::Create( seqLabel:"seq01", location:"Lane 1", stand:"Exit", movement: Movement::Arrive );
TicketInserted::Create( seqLabel:"seq01", location:"Lane 1", stand:"Exit", number:4 );
OpAction::Create( seqLabel:"seq01", location:"Lane 1", stand:"Exit", action: OperatorAction::CollectFee );
VisitCheck::CreateExit( seqLabel:"seq01", ticket:4, payment:PayStatus::paid, deadlineStatus:DeadlineStatus::ignore, unpaidStay:true ); 
VehicleMovement::Create( seqLabel:"seq01", location:"Lane 1", stand:"Exit", movement: Movement::Depart );
OccupancyCount::Create( seqLabel:"seq01", count:0 );


bucket.Initialized();',
	1,
	'',
	"00000000-0000-0000-0000-000000000000",
	0);
INSERT INTO O_TFR
	VALUES ("3834f7bf-f2fa-443b-8866-aded055f4e2b",
	"c238eef4-8e34-489a-9d81-10ecb65b505e",
	'AddBucketToSuite',
	'Configure the Test Suite to include this bucket''s set of test cases when run.',
	"ba5eda7a-def5-0000-0000-000000000000",
	0,
	'create object instance problem of NonNominalCaseBucket;
create object instance bucket of TestBucket;
bucket.name = "Non-nominal cases";
relate problem to bucket across R700;
bucket.AddToSuite();',
	1,
	'',
	"95e6566d-a792-445f-8a83-13654a09c26a",
	0);
INSERT INTO O_TFR
	VALUES ("bfe53c41-1144-4244-b653-97b83b66224b",
	"c238eef4-8e34-489a-9d81-10ecb65b505e",
	'RunSolo',
	'Execute the set of tests in this bucket stand-alone.',
	"ba5eda7a-def5-0000-0000-000000000000",
	0,
	'send TESTSEQ::RegisterTestSuite( suiteLabel:"CarPark NonNominal Test Suite", keepAllCases:False ); 
NonNominalCaseBucket::AddBucketToSuite();
send Operator::OpenCarpark();',
	1,
	'',
	"3834f7bf-f2fa-443b-8866-aded055f4e2b",
	0);
INSERT INTO O_ID
	VALUES (0,
	"c238eef4-8e34-489a-9d81-10ecb65b505e");
INSERT INTO O_ID
	VALUES (1,
	"c238eef4-8e34-489a-9d81-10ecb65b505e");
INSERT INTO O_ID
	VALUES (2,
	"c238eef4-8e34-489a-9d81-10ecb65b505e");
INSERT INTO PE_PE
	VALUES ("c238eef4-8e34-489a-9d81-10ecb65b505e",
	1,
	"b5a0758b-c174-4581-a756-efc1476e998f",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO EP_PKG_PROXY
	VALUES ("b5a0758b-c174-4581-a756-efc1476e998f",
	"00000000-0000-0000-0000-000000000000",
	"87ff681e-390e-45ca-9f9c-e0259790ea6c",
	'TestSuite',
	'',
	0,
	'../TestSuite.xtuml');
