-- BP 7.1.6 content: ModelClass syschar: 3 persistence-version: 7.1.6

INSERT INTO O_OBJ
	VALUES ("324b9649-c373-4ba1-814c-460202283e85",
	'Stay',
	5,
	'Stay',
	'Tracks a single stay of a single vehicle in a given carpark.
Created when a ticket is collected from an entry stand.
',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("751b003c-8805-4812-ad25-1c5be4949853",
	"324b9649-c373-4ba1-814c-460202283e85",
	'ProcessExit',
	'',
	"80478fa4-2779-4e87-a200-6cc9a502e760",
	1,
	'// Returns the disposition of this stay.
// Creates a charge or an additional charge if necessary.
disposition = StayDisposition::Unpaid;
CurrentTime = DateTime::CurrentSeconds();

// If there is an instance of charge, determine whether
// the exit deadline was met.
select any charge related by self->
  ChargeSegment[R15]->BaseChargeSegment[R32]->Charge[R33.''addend of''];
if ( not empty charge )
  if ( CurrentTime <= charge.ExitDeadline ) 
    disposition = StayDisposition::PunctualExit;
  else
    // Create additional charge for tardy exit
    self.CalculateAdditionalCharge();
    disposition = StayDisposition::TardyExit;
  end if;
else
  // Create payment and charge for unpaid stay.
  create object instance payment of Payment;
  payment.ExitTime = CurrentTime;
  payment.Amount = 0;
  relate payment to self across R16.''retires debt for'';
  self.CalculateCharge();
  disposition = StayDisposition::Unpaid;
end if;

return disposition;',
	1,
	'',
	"00000000-0000-0000-0000-000000000000",
	0);
INSERT INTO S_DT_PROXY
	VALUES ("80478fa4-2779-4e87-a200-6cc9a502e760",
	"00000000-0000-0000-0000-000000000000",
	'StayDisposition',
	'Indicates the status of a stay when an exit for that stay is processed.',
	'',
	'../../Types/Types.xtuml');
INSERT INTO O_TFR
	VALUES ("5ec3c370-e4d4-48c1-9495-dc0a5f6e4177",
	"324b9649-c373-4ba1-814c-460202283e85",
	'CalculateCharge',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// Use the entry time for the stay and exit time from the
// associated payment to create base charge segments for this stay.
select one payment related by self->Payment[R16.''solicits''];
self.CreateChargeSegments( Start:self.EntryTime, End:payment.ExitTime );

// Sum all charge segments and store the result in a charge
// and relate the segments to the charge.
create object instance Charge of Charge;
Charge.Amount = 0;
Charge.WaiverGranted = false;
select many ChgSegs related by self->ChargeSegment[R15];
for each ChgSeg in ChgSegs
  Charge.Amount = Charge.Amount + ChgSeg.Amount;
  create object instance BaseChgSeg of BaseChargeSegment;
  relate BaseChgSeg to ChgSeg across R32;
  relate Charge to BaseChgSeg across R33.''sum of'';
end for;',
	1,
	'',
	"751b003c-8805-4812-ad25-1c5be4949853",
	0);
INSERT INTO O_TFR
	VALUES ("bc8cfa9a-3b0c-457e-840d-222ea12cb4ca",
	"324b9649-c373-4ba1-814c-460202283e85",
	'CreateChargeSegments',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// Find all relevant instances of fee schedule for the period
// of interest delineated by the incoming parameters
// and relate each one to this stay using one charge segment.

// First, find the fee schedule covering the end of the period 
// by finding the earliest end time that is later than the 
// end of the period of interest.
cursor = 0;
EndPosition = 0;
select any FeeSched from instances of FeeSchedule where false;  // Decl
while ( true )
  select any FeeSched related by self->
    Carpark[R7.''generates revenue for'']->
    FeeSchedule[R14.''applies'']
    where ( selected.Position == cursor );
  if ( FeeSched.End >= param.End )
    EndPosition = cursor;
    break;
  else
    cursor = cursor + 1;
  end if;
end while;

// Next, find the fee schedule instance covering the beginning
// of the period of interest by walking backwards through the 
// sequence to find the latest start time that is earlier 
// than the start time for this period.
StartPosition = EndPosition;
while ( cursor >= 0 )
  select any FeeSched related by self->
    Carpark[R7.''generates revenue for'']->
    FeeSchedule[R14.''applies'']
    where ( selected.Position == cursor );
  if ( FeeSched.Start <= param.Start )
    StartPosition = cursor;
    break;
  else
    cursor = cursor - 1;
  end if;
end while;

// Link all relevant fee schedules to this stay using a charge
// segment for each link, and prod each charge segment to 
// calculate and store the amount.
cursor = StartPosition;
while ( cursor <= EndPosition )
  create object instance ChgSeg of ChargeSegment;
  select any FeeSched related by self->
    Carpark[R7.''generates revenue for'']->
    FeeSchedule[R14.''applies'']
    where ( selected.Position == cursor );
  ChgSeg.Start = ::Max( a:param.Start, b:FeeSched.Start );
  ChgSeg.End = ::Min( a:param.End, b: FeeSched.End );
  relate FeeSched to self across R15.''applies to'' using ChgSeg;
  ChgSeg.CalculateCharge();
  cursor = cursor + 1;
end while;',
	1,
	'',
	"06197662-c0f1-4004-b298-a27ee1441249",
	0);
INSERT INTO O_TPARM
	VALUES ("ce68b82c-fe30-454f-834f-1d751f2c1ec2",
	"bc8cfa9a-3b0c-457e-840d-222ea12cb4ca",
	'End',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"1fad79df-9895-49f4-86a7-c3c48d98ec77",
	'Exit time for the set of charge segments to be created which
could be for either a base charge or an additional charge.
For a base charge, this is the time at which the ticket is
inserted into the payment machine.  For an additional charge
for an overstay, this is the time at which the ticket is 
inserted into the exit stand.
Units: seconds
Origin: start of epoch');
INSERT INTO O_TPARM
	VALUES ("1fad79df-9895-49f4-86a7-c3c48d98ec77",
	"bc8cfa9a-3b0c-457e-840d-222ea12cb4ca",
	'Start',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'Start time of the period of interest.  
For a base charge, this is the entry time for the stay,
and for an additional charge, it is the exit deadline.
Units: seconds
Origin: start of epoch');
INSERT INTO O_TFR
	VALUES ("06197662-c0f1-4004-b298-a27ee1441249",
	"324b9649-c373-4ba1-814c-460202283e85",
	'CalculateAdditionalCharge',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// Use the exit deadline as the start and the current time 
// as the end of the period of interest for which to create 
// charge segments for the overstay.
select any charge related by self->ChargeSegment[R15]->
  BaseChargeSegment[R32]->Charge[R33.''addend of''];
self.CreateChargeSegments( Start:charge.ExitDeadline, 
  End:DateTime::CurrentSeconds() );

// Find all charge segments associated with this stay and 
// subtract from that set those associated with the base charge,
// leaving only the newly created charge segments to be associated
// with the additional charge for the overstay.
select many BaseChargeSegments related by self->ChargeSegment[R15]->
  BaseChargeSegment[R32]->ChargeSegment[R32];
select many ChargeSegments related by self->ChargeSegment[R15];
AdditionalChargeSegments = ChargeSegments - BaseChargeSegments;
create object instance AdditionalCharge of AdditionalCharge;
AdditionalCharge.Amount = 0;
AdditionalCharge.WaiverGranted = false;
for each ChgSeg in AdditionalChargeSegments
  AdditionalCharge.Amount = AdditionalCharge.Amount + ChgSeg.Amount;
  create object instance AddChgSeg of AdditionalChargeSegment;
  relate AddChgSeg to ChgSeg across R32;
  relate AdditionalCharge to AddChgSeg across R34.''sum of'';
end for;',
	1,
	'',
	"5ec3c370-e4d4-48c1-9495-dc0a5f6e4177",
	0);
INSERT INTO O_TFR
	VALUES ("4688c039-b4ac-457d-b154-20d5a88099f6",
	"324b9649-c373-4ba1-814c-460202283e85",
	'RemoveCharge',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// Unrelate and remove everything associated with the charge for this stay.
select any charge related by self->ChargeSegment[R15]->
  BaseChargeSegment[R32]->Charge[R33.''addend of''];
select many BaseChgSegs related by charge->
  BaseChargeSegment[R33.''sum of''];
for each BaseChgSeg in BaseChgSegs
  unrelate BaseChgSeg from charge across R33.''addend of'';
  select one ChgSeg related by BaseChgSeg->ChargeSegment[R32];
  unrelate ChgSeg from BaseChgSeg across R32;
  select one FeeSched related by ChgSeg->FeeSchedule[R15.''spans''];
  unrelate FeeSched from self across R15.''applies to'' using ChgSeg;
  delete object instance ChgSeg;
  delete object instance BaseChgSeg;
end for;
delete object instance charge;',
	1,
	'',
	"bc8cfa9a-3b0c-457e-840d-222ea12cb4ca",
	0);
INSERT INTO O_TFR
	VALUES ("3a4f8fd6-8175-4df5-9ac0-a7a009e75234",
	"324b9649-c373-4ba1-814c-460202283e85",
	'WaiverGranted',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// If an additional charge exists, it has been waived, otherwise
// it is the (base) charge that has just been waived.
select any AddChg related by self->ChargeSegment[R15]->
  AdditionalChargeSegment[R32]->AdditionalCharge[R34.''addend of''];
if ( not empty AddChg )
  AddChg.WaiverGranted = true;
else
  select any charge related by self->ChargeSegment[R15]->
    BaseChargeSegment[R32]->Charge[R33.''addend of''];
  charge.WaiverGranted = true;
end if;',
	1,
	'',
	"4688c039-b4ac-457d-b154-20d5a88099f6",
	0);
INSERT INTO O_TFR
	VALUES ("540c25f5-6252-4bbd-8794-d09ba941d244",
	"324b9649-c373-4ba1-814c-460202283e85",
	'CompleteStay',
	'Invoked when a stay is completed.',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// Log data about this stay.
LOG::LogInfo( message:"Stay completed, data follows:" );
select one date_time related by self->Carpark[R7.''generates revenue for'']->
  DateTime[R31.''delegates date and time mgt to''];

// Ticket number
select one ticket related by self->Ticket[R26.''identified by''];
LOG::LogReal( message:" <- Ticket Number.", r:ticket.Number );

// Entry time
EntryDateTimeString = date_time.Format( Time:self.EntryTime );
LOG::LogInfo( message:"Entry time: " + EntryDateTimeString );

// Exit time
select one payment related by self->Payment[R16.''solicits''];
ExitDateTimeString = date_time.Format( Time:payment.ExitTime );
LOG::LogInfo( message:"Exit time: " + ExitDateTimeString );

// Exit deadline
select any charge related by self->ChargeSegment[R15]->
  BaseChargeSegment[R32]->Charge[R33.''addend of''];
ExitDeadlineDateTimeString = date_time.Format( Time:charge.ExitDeadline );
LOG::LogInfo( message:"ExitDeadline: " + ExitDeadlineDateTimeString );

// Primary charge
ChargeDisposition = "collected.";
if ( charge.WaiverGranted )
	ChargeDisposition = "waived.";
end if;
LOG::LogReal( message:" <- Primary charge " + ChargeDisposition, r:charge.Amount );

// Additional charge, if any
select any AdditionalCharge related by self->ChargeSegment[R15]->
  AdditionalChargeSegment[R32]->AdditionalCharge[R34.''addend of''];
if ( not empty AdditionalCharge )
    ChargeDisposition = "collected.";
    if ( AdditionalCharge.WaiverGranted )
        ChargeDisposition = "waived.";
    end if;
    LOG::LogReal( message:" <- Additional charge " + ChargeDisposition, r:AdditionalCharge.Amount );
end if;
',
	1,
	'',
	"3a4f8fd6-8175-4df5-9ac0-a7a009e75234",
	0);
INSERT INTO O_NBATTR
	VALUES ("48ad1eab-ce0d-4eeb-b353-4bbe45a4f93c",
	"324b9649-c373-4ba1-814c-460202283e85");
INSERT INTO O_BATTR
	VALUES ("48ad1eab-ce0d-4eeb-b353-4bbe45a4f93c",
	"324b9649-c373-4ba1-814c-460202283e85");
INSERT INTO O_ATTR
	VALUES ("48ad1eab-ce0d-4eeb-b353-4bbe45a4f93c",
	"324b9649-c373-4ba1-814c-460202283e85",
	"00000000-0000-0000-0000-000000000000",
	'EntryTime',
	'Time at which the stay begins for the purposes of calculating 
the eventual charge for the stay.
Units: seconds
Origin: start of epoch',
	'',
	'EntryTime',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"324b9649-c373-4ba1-814c-460202283e85");
INSERT INTO O_ID
	VALUES (1,
	"324b9649-c373-4ba1-814c-460202283e85");
INSERT INTO O_ID
	VALUES (2,
	"324b9649-c373-4ba1-814c-460202283e85");
INSERT INTO PE_PE
	VALUES ("324b9649-c373-4ba1-814c-460202283e85",
	1,
	"0e2ca0ec-d69c-4d5e-a330-1f86d9c2ffa4",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO EP_PKG_PROXY
	VALUES ("0e2ca0ec-d69c-4d5e-a330-1f86d9c2ffa4",
	"00000000-0000-0000-0000-000000000000",
	"887b82b9-56ec-4387-b15a-8b42f655cdba",
	'CarparkControl',
	'Assumptions:
1. Carpark is a singleton.  However, this domain is engineered to make it 
fairly simple to support multiple instances of Carpark with a single instance
of the application.
',
	0,
	'../CarparkControl.xtuml');
